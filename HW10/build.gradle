plugins {
    id "jacoco"
}

compileJava {
    options.compilerArgs << "-parameters"
}

dependencies {
    // lombok
    compileOnly libraries.lombok
    annotationProcessor libraries.lombok
    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok

    // testing
    testImplementation libraries.junit5_core
    testImplementation libraries.junit5_api
    testImplementation libraries.junit5_params
    testImplementation libraries.assertj_core
    testImplementation libraries.mockito_core
    testImplementation libraries.jacoco

    // databases
    implementation libraries.mysql
    implementation libraries.pgsql
    implementation libraries.oracle

    // utils
    implementation libraries.validation
    implementation libraries.modelmapper
    implementation libraries.mapstruct

    // spring-boot
    implementation libraries.spring_boot_starter_web
    implementation libraries.spring_boot_starter_jpa
    implementation libraries.spring_boot_starter_validation
    testImplementation libraries.spring_boot_starter_test
}

test {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
    maxParallelForks = Runtime.runtime.availableProcessors()
}

jacocoTestReport {
    dependsOn(test)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/configurations",
                    "**/entities",
                    "**/dto",
                    "**/exceptions",
                    "**/messages",
                    "**/Main.class"
            ])
        }))
    }
}

description = "home_work_10"